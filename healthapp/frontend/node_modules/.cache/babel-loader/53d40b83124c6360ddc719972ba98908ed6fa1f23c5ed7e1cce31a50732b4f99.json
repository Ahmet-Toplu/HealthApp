{"ast":null,"code":"var _jsxFileName = \"/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HospitalMarker = ({\n  text\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 38\n}, this);\n_c = HospitalMarker;\nexport const MapsPage = () => {\n  _s();\n  const [userLocation, setUserLocation] = useState({\n    lat: 59.95,\n    lng: 30.33\n  });\n  const [hospitals, setHospitals] = useState([]);\n  const mapRef = useRef(); // To store the map instance\n  const mapsRef = useRef(); // To store the maps API object\n\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        setUserLocation(pos);\n\n        // Fetch nearby hospitals\n        fetchHospitals(pos);\n      });\n    }\n  }, []);\n  useEffect(() => {\n    if (mapRef.current && mapsRef.current && hospitals.length > 0) {\n      // Now, renderMarkers is called not just when API is loaded but also when hospitals data changes\n      renderMarkers(mapRef.current, mapsRef.current);\n    }\n  }, [hospitals]); // Depend on hospitals\n\n  const fetchHospitals = location => {\n    const {\n      lat,\n      lng\n    } = location;\n    axios.get(`http://localhost:8081/api/hospitals?lat=${lat}&lng=${lng}`).then(response => {\n      setHospitals(response.data.results);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  const renderMarkers = (map, maps) => {\n    new maps.Marker({\n      position: userLocation,\n      map,\n      title: 'Your Location'\n    });\n    hospitals.forEach(hospital => {\n      console.log(\"Marker for:\", hospital.name); // This should log for each hospital\n      new maps.Marker({\n        position: {\n          lat: hospital.geometry.location.lat,\n          lng: hospital.geometry.location.lng\n        },\n        map: map,\n        title: hospital.name\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n      },\n      center: userLocation,\n      defaultZoom: 14,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => {\n        mapRef.current = map;\n        mapsRef.current = maps;\n        renderMarkers(map, maps); // Initial call in case hospitals are already fetched\n      },\n      children: hospitals.map((hospital, index) => /*#__PURE__*/_jsxDEV(HospitalMarker, {\n        lat: hospital.geometry.location.lat,\n        lng: hospital.geometry.location.lng,\n        text: hospital.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(MapsPage, \"6zDgmAMQzfgfRN9e0s6RGYbEwMg=\");\n_c2 = MapsPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"HospitalMarker\");\n$RefreshReg$(_c2, \"MapsPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GoogleMapReact","axios","jsxDEV","_jsxDEV","HospitalMarker","text","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MapsPage","_s","userLocation","setUserLocation","lat","lng","hospitals","setHospitals","mapRef","mapsRef","navigator","geolocation","getCurrentPosition","position","pos","coords","latitude","longitude","fetchHospitals","current","length","renderMarkers","location","get","then","response","data","results","catch","error","console","log","map","maps","Marker","title","forEach","hospital","name","geometry","style","height","width","bootstrapURLKeys","key","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","center","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","index","_c2","$RefreshReg$"],"sources":["/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/map.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from 'axios';\n\nconst HospitalMarker = ({ text }) => <div>{text}</div>;\n\nexport const MapsPage = () => {\n  const [userLocation, setUserLocation] = useState({ lat: 59.95, lng: 30.33 });\n  const [hospitals, setHospitals] = useState([]);\n  const mapRef = useRef(); // To store the map instance\n  const mapsRef = useRef(); // To store the maps API object\n\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        };\n        setUserLocation(pos);\n\n        // Fetch nearby hospitals\n        fetchHospitals(pos);\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (mapRef.current && mapsRef.current && hospitals.length > 0) {\n      // Now, renderMarkers is called not just when API is loaded but also when hospitals data changes\n      renderMarkers(mapRef.current, mapsRef.current);\n    }\n  }, [hospitals]); // Depend on hospitals\n\n  const fetchHospitals = (location) => {\n    const { lat, lng } = location;\n    axios.get(`http://localhost:8081/api/hospitals?lat=${lat}&lng=${lng}`)\n    .then(response => {\n      setHospitals(response.data.results);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n  };\n\n  const renderMarkers = (map, maps) => {\n    new maps.Marker({\n        position: userLocation,\n        map,\n        title: 'Your Location',\n    });\n\n    hospitals.forEach((hospital) => {\n      console.log(\"Marker for:\", hospital.name); // This should log for each hospital\n      new maps.Marker({\n        position: { lat: hospital.geometry.location.lat, lng: hospital.geometry.location.lng },\n        map: map,\n        title: hospital.name,\n      });\n    });\n  };\n\n\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY }}\n        center={userLocation}\n        defaultZoom={14}\n        yesIWantToUseGoogleMapApiInternals\n        onGoogleApiLoaded={({ map, maps }) => {\n          mapRef.current = map;\n          mapsRef.current = maps;\n          renderMarkers(map, maps); // Initial call in case hospitals are already fetched\n        }}\n\n      >\n        {hospitals.map((hospital, index) => (\n          <HospitalMarker\n            key={index}\n            lat={hospital.geometry.location.lat}\n            lng={hospital.geometry.location.lng}\n            text={hospital.name}\n          />\n        ))}\n      </GoogleMapReact>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}