{"ast":null,"code":"var _jsxFileName = \"/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HospitalMarker = ({\n  text\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    color: 'red'\n  },\n  children: text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 38\n}, this);\n_c = HospitalMarker;\nexport const MapsPage = () => {\n  _s();\n  const [userLocation, setUserLocation] = useState(null);\n  const [hospitals, setHospitals] = useState([]);\n  const mapRef = useRef(null);\n\n  // Simulate fetching hospitals\n  const fetchHospitals = location => {\n    const {\n      lat,\n      lng\n    } = location;\n    // Replace with your actual fetch logic\n    axios.get(`http://localhost:8081/api/hospitals?lat=${lat}&lng=${lng}`).then(response => {\n      setHospitals(response.data.results);\n    }).catch(error => {\n      console.error('Error fetching hospitals:', error);\n    });\n  };\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        setUserLocation(pos);\n        fetchHospitals(pos);\n      });\n    }\n  }, []);\n  useEffect(() => {\n    if (mapRef.current) {\n      if (userLocation) {\n        // Add user location marker if userLocation is available\n        new window.google.maps.Marker({\n          position: userLocation,\n          map: mapRef.current,\n          title: 'Your Location'\n        });\n      }\n      hospitals.forEach(hospital => {\n        new window.google.maps.Marker({\n          position: {\n            lat: hospital.geometry.location.lat,\n            lng: hospital.geometry.location.lng\n          },\n          map: mapRef.current,\n          title: hospital.name\n        });\n      });\n    }\n  }, [userLocation, hospitals]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n      },\n      defaultCenter: userLocation || {\n        lat: 59.95,\n        lng: 30.33\n      } // Fallback to a default center if userLocation is null\n      ,\n      defaultZoom: 14,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map\n      }) => {\n        mapRef.current = map;\n      },\n      children: hospitals.map((hospital, index) => /*#__PURE__*/_jsxDEV(HospitalMarker, {\n        lat: hospital.geometry.location.lat,\n        lng: hospital.geometry.location.lng,\n        text: hospital.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(MapsPage, \"7y60Ww1q6O5kEw/jMPHtEJmX7tk=\");\n_c2 = MapsPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"HospitalMarker\");\n$RefreshReg$(_c2, \"MapsPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GoogleMapReact","axios","jsxDEV","_jsxDEV","HospitalMarker","text","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MapsPage","_s","userLocation","setUserLocation","hospitals","setHospitals","mapRef","fetchHospitals","location","lat","lng","get","then","response","data","results","catch","error","console","navigator","geolocation","getCurrentPosition","position","pos","coords","latitude","longitude","current","window","google","maps","Marker","map","title","forEach","hospital","geometry","name","height","width","bootstrapURLKeys","key","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","index","_c2","$RefreshReg$"],"sources":["/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/map.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from 'axios';\n\nconst HospitalMarker = ({ text }) => <div style={{ color: 'red' }}>{text}</div>;\n\nexport const MapsPage = () => {\n  const [userLocation, setUserLocation] = useState(null);\n  const [hospitals, setHospitals] = useState([]);\n  const mapRef = useRef(null);\n\n  // Simulate fetching hospitals\n  const fetchHospitals = (location) => {\n    const { lat, lng } = location;\n    // Replace with your actual fetch logic\n    axios.get(`http://localhost:8081/api/hospitals?lat=${lat}&lng=${lng}`)\n      .then(response => {\n        setHospitals(response.data.results);\n      })\n      .catch(error => {\n        console.error('Error fetching hospitals:', error);\n      });\n  };\n\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        };\n        setUserLocation(pos);\n        fetchHospitals(pos);\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (mapRef.current) {\n      if (userLocation) {\n        // Add user location marker if userLocation is available\n        new window.google.maps.Marker({\n          position: userLocation,\n          map: mapRef.current,\n          title: 'Your Location',\n        });\n      }\n      hospitals.forEach((hospital) => {\n        new window.google.maps.Marker({\n          position: {\n            lat: hospital.geometry.location.lat,\n            lng: hospital.geometry.location.lng\n          },\n          map: mapRef.current,\n          title: hospital.name,\n        });\n      });\n    }\n  }, [userLocation, hospitals]);\n\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY }}\n        defaultCenter={userLocation || { lat: 59.95, lng: 30.33 }} // Fallback to a default center if userLocation is null\n        defaultZoom={14}\n        yesIWantToUseGoogleMapApiInternals\n        onGoogleApiLoaded={({ map }) => {\n          mapRef.current = map;\n        }}\n      >\n\n        {hospitals.map((hospital, index) => (\n          <HospitalMarker\n            key={index}\n            lat={hospital.geometry.location.lat}\n            lng={hospital.geometry.location.lng}\n            text={hospital.name}\n          />\n        ))}\n      </GoogleMapReact>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}