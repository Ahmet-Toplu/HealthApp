{"ast":null,"code":"var _jsxFileName = \"/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatBotPage = () => {\n  _s();\n  const [userMessage, setUserMessage] = useState('');\n  const [conversation, setConversation] = useState([]);\n  const sendMessage = async () => {\n    if (!userMessage.trim()) return;\n    const newConversation = [...conversation, {\n      text: userMessage,\n      sender: 'user'\n    }];\n    setConversation(newConversation);\n    setUserMessage('');\n    try {\n      const response = await axios.post('http://localhost:8081/chatbot', {\n        message: userMessage\n      });\n      const botReply = response.data.reply;\n      setConversation([...newConversation, {\n        text: botReply,\n        sender: 'bot'\n      }]);\n    } catch (error) {\n      console.error('Error sending message to bot:', error);\n      setConversation([...newConversation, {\n        text: 'Error talking to the bot. Please try again later.',\n        sender: 'bot'\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mx-3 mt-3\",\n    style: {\n      paddingBottom: '88px',\n      height: '100vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversation-view\",\n        children: conversation.map((messageObj, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${messageObj.sender}`,\n          children: messageObj.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userMessage,\n          onChange: e => setUserMessage(e.target.value),\n          onKeyPress: e => e.key === 'Enter' && sendMessage(),\n          placeholder: \"Type your message here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatBotPage, \"XOZvL41ECSwy/SMTsm2qjQGK6pA=\");\n_c = ChatBotPage;\nvar _c;\n$RefreshReg$(_c, \"ChatBotPage\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ChatBotPage","_s","userMessage","setUserMessage","conversation","setConversation","sendMessage","trim","newConversation","text","sender","response","post","message","botReply","data","reply","error","console","className","style","paddingBottom","height","width","children","map","messageObj","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onKeyPress","key","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nexport const ChatBotPage = () => {\n    const [userMessage, setUserMessage] = useState('');\n    const [conversation, setConversation] = useState([]);\n\n    const sendMessage = async () => {\n        if (!userMessage.trim()) return;\n\n        const newConversation = [...conversation, { text: userMessage, sender: 'user' }];\n        setConversation(newConversation);\n        setUserMessage('');\n\n        try {\n            const response = await axios.post('http://localhost:8081/chatbot', { message: userMessage });\n            const botReply = response.data.reply;\n            setConversation([...newConversation, { text: botReply, sender: 'bot' }]);\n        } catch (error) {\n            console.error('Error sending message to bot:', error);\n            setConversation([...newConversation, { text: 'Error talking to the bot. Please try again later.', sender: 'bot' }]);\n        }\n    };\n\n    return (\n        <div className='mx-3 mt-3' style={{ paddingBottom: '88px', height: '100vh', width: '100%' }}>\n            <div className=\"chatbot-container\">\n                <div className=\"conversation-view\">\n                    {conversation.map((messageObj, index) => (\n                        <div key={index} className={`message ${messageObj.sender}`}>\n                            {messageObj.text}\n                        </div>\n                    ))}\n                </div>\n                <div className=\"message-input\">\n                    <input\n                        type=\"text\"\n                        value={userMessage}\n                        onChange={(e) => setUserMessage(e.target.value)}\n                        onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n                        placeholder=\"Type your message here...\"\n                    />\n                    <button onClick={sendMessage}>Send</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}