{"ast":null,"code":"var _jsxFileName = \"/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/map.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HospitalMarker = ({\n  text\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 38\n}, this);\n_c = HospitalMarker;\nexport const MapsPage = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [userLocation, setUserLocation] = useState({\n    lat: 59.95,\n    lng: 30.33\n  });\n  const [hospitals, setHospitals] = useState([]);\n  const mapRef = useRef(); // To store the map instance\n  const mapsRef = useRef(); // To store the maps API object\n\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        setUserLocation(pos);\n\n        // Fetch nearby hospitals\n        fetchHospitals(pos);\n      });\n    }\n  }, []);\n  const renderMarkers = (map, maps) => {\n    _s();\n    new maps.Marker({\n      position: userLocation,\n      map,\n      title: 'Your Location'\n    });\n    const fetchHospitals = location => {\n      const {\n        lat,\n        lng\n      } = location;\n      axios.get(`http://localhost:8081/api/hospitals?lat=${lat}&lng=${lng}`).then(response => {\n        setHospitals(response.data.results);\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n    useEffect(() => {\n      if (mapRef.current && mapsRef.current && hospitals.length > 0) {\n        // Now, renderMarkers is called not just when API is loaded but also when hospitals data changes\n        renderMarkers(mapRef.current, mapsRef.current);\n      }\n    }, [hospitals]); // Depend on hospitals\n\n    hospitals.forEach(hospital => {\n      console.log(\"Marker for:\", hospital.name); // This should log for each hospital\n      new maps.Marker({\n        position: {\n          lat: hospital.geometry.location.lat,\n          lng: hospital.geometry.location.lng\n        },\n        map: map,\n        title: hospital.name\n      });\n    });\n  };\n  _s(renderMarkers, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n      },\n      center: userLocation,\n      defaultZoom: 14,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => {\n        mapRef.current = map;\n        mapsRef.current = maps;\n        renderMarkers(map, maps); // Initial call in case hospitals are already fetched\n      },\n      children: hospitals.map((hospital, index) => /*#__PURE__*/_jsxDEV(HospitalMarker, {\n        lat: hospital.geometry.location.lat,\n        lng: hospital.geometry.location.lng,\n        text: hospital.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s2(MapsPage, \"WHgaOS25LIezDB2au48pV/ov4Ik=\");\n_c2 = MapsPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"HospitalMarker\");\n$RefreshReg$(_c2, \"MapsPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GoogleMapReact","axios","jsxDEV","_jsxDEV","HospitalMarker","text","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MapsPage","_s2","_s","$RefreshSig$","userLocation","setUserLocation","lat","lng","hospitals","setHospitals","mapRef","mapsRef","navigator","geolocation","getCurrentPosition","position","pos","coords","latitude","longitude","fetchHospitals","renderMarkers","map","maps","Marker","title","location","get","then","response","data","results","catch","error","console","log","current","length","forEach","hospital","name","geometry","style","height","width","bootstrapURLKeys","key","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","center","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","index","_c2","$RefreshReg$"],"sources":["/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/map.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from 'axios';\n\nconst HospitalMarker = ({ text }) => <div>{text}</div>;\n\nexport const MapsPage = () => {\n  const [userLocation, setUserLocation] = useState({ lat: 59.95, lng: 30.33 });\n  const [hospitals, setHospitals] = useState([]);\n  const mapRef = useRef(); // To store the map instance\n  const mapsRef = useRef(); // To store the maps API object\n\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        };\n        setUserLocation(pos);\n\n        // Fetch nearby hospitals\n        fetchHospitals(pos);\n      });\n    }\n  }, []);\n  \n  const renderMarkers = (map, maps) => {\n    new maps.Marker({\n        position: userLocation,\n        map,\n        title: 'Your Location',\n    });\n    \n    const fetchHospitals = (location) => {\n      const { lat, lng } = location;\n      axios.get(`http://localhost:8081/api/hospitals?lat=${lat}&lng=${lng}`)\n      .then(response => {\n        setHospitals(response.data.results);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n    };\n    \n  useEffect(() => {\n    if (mapRef.current && mapsRef.current && hospitals.length > 0) {\n      // Now, renderMarkers is called not just when API is loaded but also when hospitals data changes\n      renderMarkers(mapRef.current, mapsRef.current);\n    }\n  }, [hospitals]); // Depend on hospitals\n\n\n\n    hospitals.forEach((hospital) => {\n      console.log(\"Marker for:\", hospital.name); // This should log for each hospital\n      new maps.Marker({\n        position: { lat: hospital.geometry.location.lat, lng: hospital.geometry.location.lng },\n        map: map,\n        title: hospital.name,\n      });\n    });\n  };\n\n\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY }}\n        center={userLocation}\n        defaultZoom={14}\n        yesIWantToUseGoogleMapApiInternals\n        onGoogleApiLoaded={({ map, maps }) => {\n          mapRef.current = map;\n          mapsRef.current = maps;\n          renderMarkers(map, maps); // Initial call in case hospitals are already fetched\n        }}\n\n      >\n        {hospitals.map((hospital, index) => (\n          <HospitalMarker\n            key={index}\n            lat={hospital.geometry.location.lat}\n            lng={hospital.geometry.location.lng}\n            text={hospital.name}\n          />\n        ))}\n      </GoogleMapReact>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}