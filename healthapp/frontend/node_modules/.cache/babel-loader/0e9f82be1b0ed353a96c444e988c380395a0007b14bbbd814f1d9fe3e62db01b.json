{"ast":null,"code":"var _jsxFileName = \"/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HospitalMarker = ({\n  text\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 38\n}, this);\n_c = HospitalMarker;\nexport const MapsPage = () => {\n  _s();\n  const [userLocation, setUserLocation] = useState({\n    lat: 59.95,\n    lng: 30.33\n  });\n  const [hospitals, setHospitals] = useState([]);\n  const mapRef = useRef(); // To store the map instance\n  const mapsRef = useRef(); // To store the maps API object\n\n  useEffect(() => {\n    // Function to render markers\n    const renderMarkers = (map, maps) => {\n      // Clears existing markers before adding new ones\n      // map.clearOverlays(); // If there's a method to clear existing markers, use it here\n\n      new maps.Marker({\n        position: userLocation,\n        map,\n        title: 'Your Location'\n      });\n      hospitals.forEach(hospital => {\n        console.log(\"Marker for:\", hospital.name); // This should log for each hospital\n        new maps.Marker({\n          position: {\n            lat: hospital.geometry.location.lat,\n            lng: hospital.geometry.location.lng\n          },\n          map,\n          title: hospital.name\n        });\n      });\n    };\n    if (mapRef.current && mapsRef.current && hospitals.length > 0) {\n      renderMarkers(mapRef.current, mapsRef.current);\n    }\n  }, [hospitals]); // Include mapRef and mapsRef if they're expected to change\n\n  const fetchHospitals = location => {\n    const {\n      lat,\n      lng\n    } = location;\n    axios.get(`http://localhost:8081/api/hospitals?lat=${lat}&lng=${lng}`).then(response => {\n      setHospitals(response.data.results);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  const renderMarkers = (map, maps) => {\n    new maps.Marker({\n      position: userLocation,\n      map,\n      title: 'Your Location'\n    });\n    hospitals.forEach(hospital => {\n      console.log(\"Marker for:\", hospital.name); // This should log for each hospital\n      new maps.Marker({\n        position: {\n          lat: hospital.geometry.location.lat,\n          lng: hospital.geometry.location.lng\n        },\n        map: map,\n        title: hospital.name\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n      },\n      center: userLocation,\n      defaultZoom: 14,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => {\n        mapRef.current = map;\n        mapsRef.current = maps;\n        renderMarkers(map, maps); // Initial call in case hospitals are already fetched\n      },\n      children: hospitals.map((hospital, index) => /*#__PURE__*/_jsxDEV(HospitalMarker, {\n        lat: hospital.geometry.location.lat,\n        lng: hospital.geometry.location.lng,\n        text: hospital.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(MapsPage, \"WHgaOS25LIezDB2au48pV/ov4Ik=\");\n_c2 = MapsPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"HospitalMarker\");\n$RefreshReg$(_c2, \"MapsPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GoogleMapReact","axios","jsxDEV","_jsxDEV","HospitalMarker","text","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MapsPage","_s","userLocation","setUserLocation","lat","lng","hospitals","setHospitals","mapRef","mapsRef","renderMarkers","map","maps","Marker","position","title","forEach","hospital","console","log","name","geometry","location","current","length","fetchHospitals","get","then","response","data","results","catch","error","style","height","width","bootstrapURLKeys","key","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","center","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","index","_c2","$RefreshReg$"],"sources":["/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/map.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from 'axios';\n\nconst HospitalMarker = ({ text }) => <div>{text}</div>;\n\nexport const MapsPage = () => {\n  const [userLocation, setUserLocation] = useState({ lat: 59.95, lng: 30.33 });\n  const [hospitals, setHospitals] = useState([]);\n  const mapRef = useRef(); // To store the map instance\n  const mapsRef = useRef(); // To store the maps API object\n\n  useEffect(() => {\n    // Function to render markers\n    const renderMarkers = (map, maps) => {\n      // Clears existing markers before adding new ones\n      // map.clearOverlays(); // If there's a method to clear existing markers, use it here\n  \n      new maps.Marker({\n        position: userLocation,\n        map,\n        title: 'Your Location',\n      });\n  \n      hospitals.forEach((hospital) => {\n        console.log(\"Marker for:\", hospital.name); // This should log for each hospital\n        new maps.Marker({\n          position: { lat: hospital.geometry.location.lat, lng: hospital.geometry.location.lng },\n          map,\n          title: hospital.name,\n        });\n      });\n    };\n  \n    if (mapRef.current && mapsRef.current && hospitals.length > 0) {\n      renderMarkers(mapRef.current, mapsRef.current);\n    }\n  }, [hospitals]); // Include mapRef and mapsRef if they're expected to change\n  \n\n  const fetchHospitals = (location) => {\n    const { lat, lng } = location;\n    axios.get(`http://localhost:8081/api/hospitals?lat=${lat}&lng=${lng}`)\n    .then(response => {\n      setHospitals(response.data.results);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n  };\n\n  const renderMarkers = (map, maps) => {\n    new maps.Marker({\n        position: userLocation,\n        map,\n        title: 'Your Location',\n    });\n\n    hospitals.forEach((hospital) => {\n      console.log(\"Marker for:\", hospital.name); // This should log for each hospital\n      new maps.Marker({\n        position: { lat: hospital.geometry.location.lat, lng: hospital.geometry.location.lng },\n        map: map,\n        title: hospital.name,\n      });\n    });\n  };\n\n\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY }}\n        center={userLocation}\n        defaultZoom={14}\n        yesIWantToUseGoogleMapApiInternals\n        onGoogleApiLoaded={({ map, maps }) => {\n          mapRef.current = map;\n          mapsRef.current = maps;\n          renderMarkers(map, maps); // Initial call in case hospitals are already fetched\n        }}\n\n      >\n        {hospitals.map((hospital, index) => (\n          <HospitalMarker\n            key={index}\n            lat={hospital.geometry.location.lat}\n            lng={hospital.geometry.location.lng}\n            text={hospital.name}\n          />\n        ))}\n      </GoogleMapReact>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}