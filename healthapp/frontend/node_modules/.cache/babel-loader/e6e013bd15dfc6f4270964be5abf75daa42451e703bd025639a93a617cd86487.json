{"ast":null,"code":"var _jsxFileName = \"/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/contact.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactPage = () => {\n  _s();\n  const [location, setLocation] = useState({\n    lat: null,\n    lng: null\n  });\n\n  // Define fetchContacts inside useEffect or use useCallback to avoid defining it on each render\n  const fetchContacts = () => {\n    // Check if lat and lng are not null to avoid unnecessary requests\n    if (location.lat && location.lng) {\n      axios.get(`http://localhost:8081/api/contact?lat=${location.lat}&lng=${location.lng}`).then(response => {\n        // Process your response here\n        console.log(response.data); // Example usage\n      }).catch(error => {\n        console.error('Error fetching hospitals:', error);\n      });\n    }\n  };\n  useEffect(() => {\n    const onSuccess = position => {\n      setLocation({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n    };\n    navigator.geolocation.getCurrentPosition(onSuccess);\n  }, []);\n\n  // Use useEffect to call fetchContacts whenever location changes\n  useEffect(() => {\n    fetchContacts();\n  }, [location]); // Dependency array includes location, so fetchContacts runs when location changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mx-3 mt-3\",\n    style: {\n      paddingBottom: '88px',\n      height: '100vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"404 Page Not Found Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(ContactPage, \"DgW46AjqaqhP2P1yivWr7ULVa0o=\");\n_c = ContactPage;\nvar _c;\n$RefreshReg$(_c, \"ContactPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ContactPage","_s","location","setLocation","lat","lng","fetchContacts","get","then","response","console","log","data","catch","error","onSuccess","position","coords","latitude","longitude","navigator","geolocation","getCurrentPosition","className","style","paddingBottom","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/contact.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const ContactPage = () => {\n    const [location, setLocation] = useState({ lat: null, lng: null });\n\n    // Define fetchContacts inside useEffect or use useCallback to avoid defining it on each render\n    const fetchContacts = () => {\n        // Check if lat and lng are not null to avoid unnecessary requests\n        if (location.lat && location.lng) {\n            axios.get(`http://localhost:8081/api/contact?lat=${location.lat}&lng=${location.lng}`)\n                .then(response => {\n                    // Process your response here\n                    console.log(response.data); // Example usage\n                })\n                .catch(error => {\n                    console.error('Error fetching hospitals:', error);\n                });\n        }\n    };\n\n    useEffect(() => {\n        const onSuccess = (position) => {\n            setLocation({\n                lat: position.coords.latitude,\n                lng: position.coords.longitude,\n            });\n        };\n\n        navigator.geolocation.getCurrentPosition(onSuccess);\n    }, []);\n\n    // Use useEffect to call fetchContacts whenever location changes\n    useEffect(() => {\n        fetchContacts();\n    }, [location]); // Dependency array includes location, so fetchContacts runs when location changes\n\n    return (\n        <div className='mx-3 mt-3' style={{ paddingBottom: '88px', height: '100vh', width: '100%' }}>\n            <h1>404 Page Not Found Contacts</h1>\n        </div>\n    );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC;IAAES,GAAG,EAAE,IAAI;IAAEC,GAAG,EAAE;EAAK,CAAC,CAAC;;EAElE;EACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;IACxB;IACA,IAAIJ,QAAQ,CAACE,GAAG,IAAIF,QAAQ,CAACG,GAAG,EAAE;MAC9BR,KAAK,CAACU,GAAG,CAAE,yCAAwCL,QAAQ,CAACE,GAAI,QAAOF,QAAQ,CAACG,GAAI,EAAC,CAAC,CACjFG,IAAI,CAACC,QAAQ,IAAI;QACd;QACAC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;MAChC,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;QACZJ,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACrD,CAAC,CAAC;IACV;EACJ,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACZ,MAAMmB,SAAS,GAAIC,QAAQ,IAAK;MAC5Bb,WAAW,CAAC;QACRC,GAAG,EAAEY,QAAQ,CAACC,MAAM,CAACC,QAAQ;QAC7Bb,GAAG,EAAEW,QAAQ,CAACC,MAAM,CAACE;MACzB,CAAC,CAAC;IACN,CAAC;IAEDC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAACP,SAAS,CAAC;EACvD,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAnB,SAAS,CAAC,MAAM;IACZU,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,oBACIH,OAAA;IAAKwB,SAAS,EAAC,WAAW;IAACC,KAAK,EAAE;MAAEC,aAAa,EAAE,MAAM;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,eACxF7B,OAAA;MAAA6B,QAAA,EAAI;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEd,CAAC;AAAC/B,EAAA,CAvCWD,WAAW;AAAAiC,EAAA,GAAXjC,WAAW;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}