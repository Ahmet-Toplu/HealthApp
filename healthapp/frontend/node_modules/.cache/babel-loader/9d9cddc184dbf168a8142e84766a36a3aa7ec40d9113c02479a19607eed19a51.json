{"ast":null,"code":"var _jsxFileName = \"/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HospitalMarker = ({\n  text\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    color: 'red'\n  },\n  children: text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 38\n}, this);\n_c = HospitalMarker;\nexport const MapsPage = () => {\n  _s();\n  const [userLocation, setUserLocation] = useState({\n    lat: 59.95,\n    lng: 30.33\n  });\n  const [hospitals, setHospitals] = useState([]);\n  const mapRef = useRef(); // To store the map instance\n  const mapsRef = useRef(); // To store the maps API object\n\n  // Simulate fetching hospitals\n  const fetchHospitals = location => {\n    const {\n      lat,\n      lng\n    } = location;\n    // Replace with your actual fetch logic\n    axios.get(`http://localhost:8081/api/hospitals?lat=${lat}&lng=${lng}`).then(response => {\n      setHospitals(response.data.results);\n    }).catch(error => {\n      console.error('Error fetching hospitals:', error);\n    });\n  };\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        setUserLocation(pos);\n        fetchHospitals(pos);\n      });\n    }\n  }, []);\n  useEffect(() => {\n    if (mapRef.current && mapsRef.current && hospitals.length > 0) {\n      hospitals.forEach(hospital => {\n        new mapsRef.current.Marker({\n          position: {\n            lat: hospital.geometry.location.lat,\n            lng: hospital.geometry.location.lng\n          },\n          map: mapRef.current,\n          title: hospital.name\n        });\n      });\n    }\n  }, [hospitals]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: 'YOUR_API_KEY'\n      },\n      defaultCenter: userLocation,\n      defaultZoom: 10,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => {\n        mapRef.current = map;\n        mapsRef.current = maps;\n        new maps.Marker({\n          position: userLocation,\n          map,\n          title: 'Your Location'\n        });\n      },\n      children: hospitals.map((hospital, index) => /*#__PURE__*/_jsxDEV(HospitalMarker, {\n        lat: hospital.geometry.location.lat,\n        lng: hospital.geometry.location.lng,\n        text: hospital.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(MapsPage, \"6zDgmAMQzfgfRN9e0s6RGYbEwMg=\");\n_c2 = MapsPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"HospitalMarker\");\n$RefreshReg$(_c2, \"MapsPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GoogleMapReact","axios","jsxDEV","_jsxDEV","HospitalMarker","text","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MapsPage","_s","userLocation","setUserLocation","lat","lng","hospitals","setHospitals","mapRef","mapsRef","fetchHospitals","location","get","then","response","data","results","catch","error","console","navigator","geolocation","getCurrentPosition","position","pos","coords","latitude","longitude","current","length","forEach","hospital","Marker","geometry","map","title","name","height","width","bootstrapURLKeys","key","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","maps","index","_c2","$RefreshReg$"],"sources":["/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/map.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from 'axios';\n\nconst HospitalMarker = ({ text }) => <div style={{ color: 'red' }}>{text}</div>;\n\nexport const MapsPage = () => {\n    const [userLocation, setUserLocation] = useState({ lat: 59.95, lng: 30.33 });\n    const [hospitals, setHospitals] = useState([]);\n    const mapRef = useRef(); // To store the map instance\n    const mapsRef = useRef(); // To store the maps API object\n\n    // Simulate fetching hospitals\n    const fetchHospitals = (location) => {\n        const { lat, lng } = location;\n        // Replace with your actual fetch logic\n        axios.get(`http://localhost:8081/api/hospitals?lat=${lat}&lng=${lng}`)\n            .then(response => {\n                setHospitals(response.data.results);\n            })\n            .catch(error => {\n                console.error('Error fetching hospitals:', error);\n            });\n    };\n\n    useEffect(() => {\n        if (\"geolocation\" in navigator) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                const pos = {\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude,\n                };\n                setUserLocation(pos);\n                fetchHospitals(pos);\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        if (mapRef.current && mapsRef.current && hospitals.length > 0) {\n            hospitals.forEach((hospital) => {\n                new mapsRef.current.Marker({\n                    position: {\n                        lat: hospital.geometry.location.lat,\n                        lng: hospital.geometry.location.lng\n                    },\n                    map: mapRef.current,\n                    title: hospital.name,\n                });\n            });\n        }\n    }, [hospitals]);\n\n    return (\n        <div style={{ height: '100vh', width: '100%' }}>\n            <GoogleMapReact\n                bootstrapURLKeys={{ key: 'YOUR_API_KEY' }}\n                defaultCenter={userLocation}\n                defaultZoom={10}\n                yesIWantToUseGoogleMapApiInternals\n                onGoogleApiLoaded={({ map, maps }) => {\n                    mapRef.current = map;\n                    mapsRef.current = maps;\n                    new maps.Marker({\n                        position: userLocation,\n                        map,\n                        title: 'Your Location',\n                    });\n                }}\n            >\n                {hospitals.map((hospital, index) => (\n                    <HospitalMarker\n                        key={index}\n                        lat={hospital.geometry.location.lat}\n                        lng={hospital.geometry.location.lng}\n                        text={hospital.name}\n                    />\n                ))}\n            </GoogleMapReact>\n        </div>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}