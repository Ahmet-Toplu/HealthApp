{"ast":null,"code":"var _jsxFileName = \"/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HospitalMarker = ({\n  text\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    color: 'red'\n  },\n  children: text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 38\n}, this);\n_c = HospitalMarker;\nconst UserLocationMarker = ({\n  text\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    color: 'blue'\n  },\n  children: text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 42\n}, this);\n_c2 = UserLocationMarker;\nexport const MapsPage = () => {\n  _s();\n  const [userLocation, setUserLocation] = useState(null);\n  const [hospitals, setHospitals] = useState([]);\n  const mapRef = useRef(null);\n  const userLocationMarkerRef = useRef(null);\n  const accuracyCircleRef = useRef(null);\n\n  // Simulate fetching hospitals\n  const fetchHospitals = location => {\n    const {\n      lat,\n      lng\n    } = location;\n    // Replace with your actual fetch logic\n    axios.get(`http://localhost:8081/api/hospitals?lat=${lat}&lng=${lng}`).then(response => {\n      setHospitals(response.data.results);\n    }).catch(error => {\n      console.error('Error fetching hospitals:', error);\n    });\n  };\n  useEffect(() => {\n    let watchId = null;\n    if (\"geolocation\" in navigator) {\n      watchId = navigator.geolocation.watchPosition(position => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n          accuracy: position.coords.accuracy\n        };\n        setUserLocation(pos);\n        fetchHospitals(pos);\n        if (mapRef.current) {\n          // Update the marker and circle's position on the map\n          if (userLocationMarkerRef.current) {\n            userLocationMarkerRef.current.setPosition(pos);\n            accuracyCircleRef.current.setCenter(pos);\n            accuracyCircleRef.current.setRadius(position.coords.accuracy);\n          } else {\n            // Initialize the marker and circle if they don't exist yet\n            userLocationMarkerRef.current = new window.google.maps.Marker({\n              position: pos,\n              map: mapRef.current,\n              title: 'Your Location',\n              icon: {\n                path: window.google.maps.SymbolPath.CIRCLE,\n                scale: 10,\n                fillColor: \"#0000FF\",\n                fillOpacity: 0.4,\n                strokeWeight: 0.4\n              }\n            });\n            accuracyCircleRef.current = new window.google.maps.Circle({\n              strokeColor: \"#0000FF\",\n              strokeOpacity: 0.5,\n              strokeWeight: 2,\n              fillColor: \"#0000FF\",\n              fillOpacity: 0.1,\n              map: mapRef.current,\n              center: pos,\n              radius: position.coords.accuracy\n            });\n          }\n        }\n      }, err => {\n        console.error(err);\n      }, {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0\n      });\n    }\n\n    // Clean up the watchPosition listener when the component is unmounted\n    return () => {\n      if (watchId != null) {\n        navigator.geolocation.clearWatch(watchId);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (mapRef.current) {\n      hospitals.forEach(hospital => {\n        new window.google.maps.Marker({\n          position: {\n            lat: hospital.geometry.location.lat,\n            lng: hospital.geometry.location.lng\n          },\n          map: mapRef.current,\n          title: hospital.name\n        });\n      });\n    }\n  }, [userLocation, hospitals]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n      },\n      center: userLocation || {\n        lat: 59.95,\n        lng: 30.33\n      } // Fallback to a default center if userLocation is null\n      ,\n      defaultZoom: 14,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map\n      }) => {\n        mapRef.current = map;\n      },\n      children: [userLocation && /*#__PURE__*/_jsxDEV(UserLocationMarker, {\n        lat: userLocation.lat,\n        lng: userLocation.lng,\n        text: \"Your Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), hospitals.map((hospital, index) => /*#__PURE__*/_jsxDEV(HospitalMarker, {\n        lat: hospital.geometry.location.lat,\n        lng: hospital.geometry.location.lng,\n        text: hospital.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(MapsPage, \"9uUlQbivTTaZVPgOSDsT5dYO65A=\");\n_c3 = MapsPage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"HospitalMarker\");\n$RefreshReg$(_c2, \"UserLocationMarker\");\n$RefreshReg$(_c3, \"MapsPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GoogleMapReact","axios","jsxDEV","_jsxDEV","HospitalMarker","text","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","UserLocationMarker","_c2","MapsPage","_s","userLocation","setUserLocation","hospitals","setHospitals","mapRef","userLocationMarkerRef","accuracyCircleRef","fetchHospitals","location","lat","lng","get","then","response","data","results","catch","error","console","watchId","navigator","geolocation","watchPosition","position","pos","coords","latitude","longitude","accuracy","current","setPosition","setCenter","setRadius","window","google","maps","Marker","map","title","icon","path","SymbolPath","CIRCLE","scale","fillColor","fillOpacity","strokeWeight","Circle","strokeColor","strokeOpacity","center","radius","err","enableHighAccuracy","timeout","maximumAge","clearWatch","forEach","hospital","geometry","name","height","width","bootstrapURLKeys","key","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","index","_c3","$RefreshReg$"],"sources":["/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/map.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from 'axios';\n\nconst HospitalMarker = ({ text }) => <div style={{ color: 'red' }}>{text}</div>;\nconst UserLocationMarker = ({ text }) => <div style={{ color: 'blue' }}>{text}</div>;\n\nexport const MapsPage = () => {\n  const [userLocation, setUserLocation] = useState(null);\n  const [hospitals, setHospitals] = useState([]);\n  const mapRef = useRef(null);\n  const userLocationMarkerRef = useRef(null);\n  const accuracyCircleRef = useRef(null);\n\n  // Simulate fetching hospitals\n  const fetchHospitals = (location) => {\n    const { lat, lng } = location;\n    // Replace with your actual fetch logic\n    axios.get(`http://localhost:8081/api/hospitals?lat=${lat}&lng=${lng}`)\n      .then(response => {\n        setHospitals(response.data.results);\n      })\n      .catch(error => {\n        console.error('Error fetching hospitals:', error);\n      });\n  };\n\n  useEffect(() => {\n    let watchId = null;\n\n    if (\"geolocation\" in navigator) {\n      watchId = navigator.geolocation.watchPosition(\n        (position) => {\n          const pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n            accuracy: position.coords.accuracy,\n          };\n          setUserLocation(pos);\n          fetchHospitals(pos);\n\n          if (mapRef.current) {\n            // Update the marker and circle's position on the map\n            if (userLocationMarkerRef.current) {\n              userLocationMarkerRef.current.setPosition(pos);\n              accuracyCircleRef.current.setCenter(pos);\n              accuracyCircleRef.current.setRadius(position.coords.accuracy);\n            } else {\n              // Initialize the marker and circle if they don't exist yet\n              userLocationMarkerRef.current = new window.google.maps.Marker({\n                position: pos,\n                map: mapRef.current,\n                title: 'Your Location',\n                icon: {\n                  path: window.google.maps.SymbolPath.CIRCLE,\n                  scale: 10,\n                  fillColor: \"#0000FF\",\n                  fillOpacity: 0.4,\n                  strokeWeight: 0.4\n                }\n              });\n\n              accuracyCircleRef.current = new window.google.maps.Circle({\n                strokeColor: \"#0000FF\",\n                strokeOpacity: 0.5,\n                strokeWeight: 2,\n                fillColor: \"#0000FF\",\n                fillOpacity: 0.1,\n                map: mapRef.current,\n                center: pos,\n                radius: position.coords.accuracy,\n              });\n            }\n          }\n        },\n        (err) => {\n          console.error(err);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 5000,\n          maximumAge: 0,\n        }\n      );\n    }\n\n    // Clean up the watchPosition listener when the component is unmounted\n    return () => {\n      if (watchId != null) {\n        navigator.geolocation.clearWatch(watchId);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (mapRef.current) {\n      hospitals.forEach((hospital) => {\n        new window.google.maps.Marker({\n          position: {\n            lat: hospital.geometry.location.lat,\n            lng: hospital.geometry.location.lng\n          },\n          map: mapRef.current,\n          title: hospital.name,\n        });\n      });\n    }\n  }, [userLocation, hospitals]);\n\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY }}\n        center={userLocation || { lat: 59.95, lng: 30.33 }} // Fallback to a default center if userLocation is null\n        defaultZoom={14}\n        yesIWantToUseGoogleMapApiInternals\n        onGoogleApiLoaded={({ map }) => {\n          mapRef.current = map;\n        }}\n      >\n        \n        {userLocation && (\n          <UserLocationMarker\n            lat={userLocation.lat}\n            lng={userLocation.lng}\n            text=\"Your Location\"\n          />\n        )}\n\n        {hospitals.map((hospital, index) => (\n          <HospitalMarker\n            key={index}\n            lat={hospital.geometry.location.lat}\n            lng={hospital.geometry.location.lng}\n            text={hospital.name}\n          />\n        ))}\n      </GoogleMapReact>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}