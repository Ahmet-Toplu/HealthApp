{"ast":null,"code":"var _jsxFileName = \"/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HospitalMarker = ({\n  text\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 38\n}, this);\n_c = HospitalMarker;\nexport const MapsPage = () => {\n  _s();\n  const [userLocation, setUserLocation] = useState({\n    lat: 59.95,\n    lng: 30.33\n  });\n  const [hospitals, setHospitals] = useState([]);\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        setUserLocation(pos);\n\n        // Fetch nearby hospitals\n        fetchHospitals(pos);\n      });\n    }\n  }, []);\n  const fetchHospitals = location => {\n    const {\n      lat,\n      lng\n    } = location;\n    const radius = 2000; // Search within 2km radius\n    const type = 'hospital';\n    const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n    const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=${radius}&type=${type}&key=${apiKey}`;\n    axios.get(url).then(response => {\n      // Process the response to extract hospital locations\n      setHospitals(response.data.results);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n      },\n      center: userLocation,\n      defaultZoom: 14,\n      yesIWantToUseGoogleMapApiInternals: true,\n      children: hospitals.map((hospital, index) => /*#__PURE__*/_jsxDEV(HospitalMarker, {\n        lat: hospital.geometry.location.lat,\n        lng: hospital.geometry.location.lng,\n        text: hospital.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(MapsPage, \"tx34TZBRIFu4WfOcO81PALofQZc=\");\n_c2 = MapsPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"HospitalMarker\");\n$RefreshReg$(_c2, \"MapsPage\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMapReact","axios","jsxDEV","_jsxDEV","HospitalMarker","text","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MapsPage","_s","userLocation","setUserLocation","lat","lng","hospitals","setHospitals","navigator","geolocation","getCurrentPosition","position","pos","coords","latitude","longitude","fetchHospitals","location","radius","type","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","url","get","then","response","data","results","catch","error","console","log","style","height","width","bootstrapURLKeys","key","center","defaultZoom","yesIWantToUseGoogleMapApiInternals","map","hospital","index","geometry","name","_c2","$RefreshReg$"],"sources":["/Users/alexhofman/ComputingProject/HealthApp/healthapp/frontend/src/pages/map.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport axios from 'axios';\n\nconst HospitalMarker = ({ text }) => <div>{text}</div>;\n\nexport const MapsPage = () => {\n  const [userLocation, setUserLocation] = useState({\n    lat: 59.95,\n    lng: 30.33,\n  });\n  const [hospitals, setHospitals] = useState([]);\n\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        };\n        setUserLocation(pos);\n\n        // Fetch nearby hospitals\n        fetchHospitals(pos);\n      });\n    }\n  }, []);\n\n  const fetchHospitals = (location) => {\n    const { lat, lng } = location;\n    const radius = 2000; // Search within 2km radius\n    const type = 'hospital';\n    const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n    const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=${radius}&type=${type}&key=${apiKey}`;\n\n    axios.get(url)\n      .then(response => {\n        // Process the response to extract hospital locations\n        setHospitals(response.data.results);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY }}\n        center={userLocation}\n        defaultZoom={14}\n        yesIWantToUseGoogleMapApiInternals\n      >\n        {hospitals.map((hospital, index) => (\n          <HospitalMarker\n            key={index}\n            lat={hospital.geometry.location.lat}\n            lng={hospital.geometry.location.lng}\n            text={hospital.name}\n          />\n        ))}\n      </GoogleMapReact>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}